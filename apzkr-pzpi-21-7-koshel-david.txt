Міністерство освіті і науки України
Харківський національний університет радіоелектроніки
 
Факультет комп’ютерних наук
Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для роботи мережі салонів краси

 Студент гр. ПЗПІ-21-7		 _________________ Кошель Д.Ю.
				    (підпис)
 Керівник роботи			 _________________ ст. викл. Сокорчук І.П.
(підпис)

Роботу захищено «__»_________2024 р.
з оцінкою ________________________


Комісія:				 ___________________ доц. Лещинський В.О.
						   (підпис)
 ___________________ доц. Лещинська І.О.
						   (підпис)
 ___________________ ст. викл. Сокорчук І.П.
						   (підпис)


Харків 2024 р.
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук                               Кафедра програмної інженерії
Спеціальність 121 – Інженерія програмного забезпечення                                      .
Курс             3             Семестр                                  6                                                  .
Навчальна дисципліна Архітектура програмного забезпечення                               .

ЗАВДАННЯ
НА ЛАБОРАТОРНІ РОБОТИ СТУДЕНТОВІ

1. Тема проєкту: Програмна система для роботи мережі салонів краси               . 
2. Термін узгодження завдання з лабораторних робіт « 1 » березня    2024 р.
3. Термін здачі завдання з лабораторних робіт « 12 » квітня              	 2024 р.
4. Вихідні дані до проєкту: Проєкт повинен бути оригінальним і масово користуватися, передбачаючи можливість подальшої монетизації. Програмна система повинна вирішувати актуальну проблему сьогодення, бути масштабованою та орієнтованою на широке коло користувачів. Крім того, система має підтримувати інтернаціоналізацію та локалізацію, мати інтерфейси українською та англійською мовами, забезпечувати захист персональних даних, і включати компоненти серверної, клієнтської, мобільної та IoT частин.                                                                                                                    .
5. Зміст звітів з лабораторних робіт (перелік питань, що належить розробити): Належить зробити аркуш завдання та опис проєкту у форматі Vision & Scope, серверну частину на другій лабораторній, програмне забезпечення для IoT або SmartDevice пристрою на третій, клієнтську / front-end частину на четвертій та мобільний додаток на п'ятій. Проєкт передбачає взаємодію всіх компонентів, зокрема, IoT або SmartDevice пристрою, який має розширену функціональність та інтегрується з іншими частинами системи.                       .
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси): Use Case diagram, Deployment diagram, ER diagram, Package diagram, State diagram           .
КАЛЕНДАРНИЙ ПЛАН
 
№	Основні етапи виконання проєкту в рамках лабораторних робіт	Термін виконання
етапів	Примітка
1	Vision & Scope документація	20.03.2024-12.04.2024	Виконано
2	Серверна складова системи	13.04.2024-20.04.2024	Виконано
3	SmartDevice складова системи	21.04.2024-15.05.2024	Виконано
4	Програмний застосункок системи	16.05.2024-29.05.2024	Виконано
5	Мобільний застосунок системи	30.05.2024-07.06.2024	Виконано

Дата видачі теми проєкту «      20      »            березня            2024 р.

Викладач лабораторних робіт ___________ ст. викл. Сокорчук І.П.



Завдання прийняв до виконання
ст.гр. ПЗПІІ-21-7                          ___________              Кошель Д.Ю.   .        
 
РЕФЕРАТ


Пояснювальна записка до курсової роботи: 58 с., 17 рис., 4 додатки, 6 джерел посилання.
БАЗА ДАНИХ, МЕРЕЖА САЛОНІВ, САЛОН КРАСИ, ПРИМІЩЕННЯ, ФІНАНСОВА СТАТИСТИКА, ЗАМОВЛЕННЯ, SPRING BOOT FRAMEWORK, JAVA, REACT, POSTGRESQL, KOTLIN.
Об’єкт дослідження - процеси управління мережею салонів краси, зокрема облік фінансової статистики, моніторинг умов у приміщеннях та автоматизація операцій з замовленнями.
Мета роботи - розробка програмної системи для управління мережею салонів краси, що забезпечить власникам доступ до фінансової статистики та управління персоналом, а працівникам - можливість ефективно обслуговувати клієнтів та контролювати умови у салонах.
Методи дослідження - аналіз вимог користувачів, проектування архітектури системи з використанням мікросервісного підходу, розробка і впровадження окремих мікросервісів з використанням Spring Boot та Spring Cloud Gateway, тестування функціональних можливостей системи на мобільних пристроях та веб-інтерфейсі, інтеграція системи з датчиками для моніторингу умов у приміщеннях.
Розроблено архітектуру системи на основі мікросервісів, що дозволяє легко масштабувати та підтримувати систему, забезпечує її високу доступність та відмовостійкість.
Реалізовано інтеграцію з датчиками для моніторингу температури та вологості у салонах, що дозволяє працівникам контролювати ці параметри через мобільний додаток. 
 
ЗМІСТ


ВСТУП……………………………………………………………………………..…7	
1 БІЗНЕС-ВИМОГИ…………………………………………………………………8
1.1 Передумови…………………………………………………………………...	8
1.2 Бізнес можливості……………………………………………………………	9
1.3 Бізнес-цілі та критерії успіху………………………………………………	12
1.4 Потреби клієнтів та ринку………………………………………………….	14
1.5 Бізнес-ризики…………………………………………………………..……14
2 КОНЦЕПЦІЯ РІШЕННЯ……………………………………………………...…	16
2.1 Окреслення концепції………………………………………………………	16
2.2 Головна функціональність…………………………………………………	16
2.3 Припущення та залежності…………………………………………………	17
3 РАМКИ ТА ОБМЕЖЕННЯ…………………………………………………...…	19
3.1 Рамки первинного випуску…………………………………………………	19
3.2 Рамки наступних випусків…………………………………………………	23
4 БІЗНЕС-КОНТЕКСТ…………………………………………………………..…	25
4.1 Профілі зацікавлених сторін…………………………………………….…	27
4.2 Пріоритети проєкту…………………………………………………………	28
4.3 Робоче середовище……………………………………………………….…29
5 СЕРВЕРНА ЧАСТИНА…………………………………………………………	30
5.1 Загальна логіка та сутності…………………………………………………	30
5.2 Інженерні рішення …………………………………………………………	33
6 IOT ЧАСТИНА………………………………………………………………...…	37
6.1 Роль IoT у системі………………………………………………….………	37
6.2 Інженерні рішення…………………………………………………….……	39
7 WEB ЧАСТИНА…………………………………………………………………	42
7.1 Загальний огляд веб-застосунку………………………………………..…	42
7.2 Інженерні рішення……………………………………………………….…	43
ВИСНОВКИ……………………………………………………………………..…	46
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ…………………………………..…………..	47
ДОДАТОК А………………………………………………………………………..	48
ДОДАТОК Б……………………………………………………………………...…51
ДОДАТОК В………………………………………………………………………..55
ДОДАТОК Г………………………………………………………………………...58


 
ВСТУП


На сьогоднішній день використання CRM-систем та розумних пристроїв є актуальним для багатьох компаній, які прагнуть покращити якість обслуговування та спростити управління. Програмні системи для управління мережею салонів краси є ефективним та сучасним інструментом, що привертає увагу підприємців у сфері послуг.
Проте, управління мережею салонів краси вимагає складних технічних та адміністративних процесів. Для забезпечення ефективної та надійної роботи салонів, компаніям необхідно мати систему управління, яка забезпечує моніторинг, контроль та аналіз роботи салонів.
Мета даної роботи - розробка системи управління мережею салонів краси для бізнесів будь-якого масштабу. Ця система надає підприємцям можливість ефективно контролювати та оптимізувати роботу їхніх салонів краси. Вона дозволить збирати дані про фінансову статистику, стан приміщень, замовлення у салонах та інші важливі параметри.
Для розробки системи управління використовуватимуться сучасні технології та інструменти, такі як мова програмування Java та платформа Spring Boot, які будуть використовуватись для розробки програмного забезпечення. Для зберігання та управління даними буде використана система керування базами даних PostgreSQL. Застосування React дозволить реалізувати веб-інтерфейс для користувачів системи. Мобільний додаток розроблено на мові програмування Kotlin в середовищі Android Studio. Розумний пристрій розроблено на базі ESP32 контролеру з використанням DHT22 сенсору температури та вологості, та LDR датчику для вимірювання ступеня освітлення у приміщені салону.
 
1 БІЗНЕС-ВИМОГИ
1.1 Передумови


Дана програмна система вирішує проблему неможливого контролювання багатьох аспектів у вже великих мережах салонів краси для власників цих мереж, які можуть налічувати сотні салонів по всій країні. До цих аспектів належать робочий процес, його прозорість та якість обслуговування, яку може спостерігати власник мережі через встановлені камери відповідного салону краси. Також до цих аспектів належить фінансова складова та успішність бізнесу, завдяки перегляду статистик місячного обороту, прибутку та інше. Таким чином, власнику мережі не прийдеться фізично відвідувати кожний салон краси для контролювання якості обслуговування, перевірки прозорості робочого процесу та щомісячного фінансового аудиту. 


1.2 Бізнес-можливості


Серед аналогів нашої системи  можна виділити онлайн систему для управління салоном краси «Beauty Pro» яка дозволяє контролювати співробітників та створювати розклад їх роботи, нараховувати їм зарплату, вести облік витратних матеріалів, відстежувати доходи та витрати, бачити клієнтську базу та інформацію щодо візитів. Перевагами цієї системи над нашою є можливість створювати 150 видів різних звітів та можливість завчасного запису на сеанс для клієнтів з Facebook, Instagram та веб-сайту. До аналогів також можна додати такі системи, як «Bookon CRM» та «CleverBox CRM»,  що є хмарними платформа для автоматизації керування салоном краси, косметичним центром, клінікою та СПА. 
Перевага нашої системи над всіма іншими є можливість контролювання не тільки одного салону, а цілої мережі салоні. Крім того, можна зазначити наявність підключених smart-пристроїв та відеоспостереження в цих салонах краси. 
Модель монетизації нашої програмної системи включатиме щомісячну
оплату власниками мереж салонів підписки різних рівнів на можливість використання даної системи, а також монетизацію через інтеграцію реклами у вигляді банерів, відео тощо від самих салонів краси у додатку або від партнерів


1.3 Бізнес-цілі та критерії успіху


Наша програмна система надає закладам можливість отримати фінансовий приріст завдяки таким моментам:
•	Зниження часу управління записами клієнтів на 20% протягом першого року використання.
•	Зменшення витрат на додаткову заробітну плату керуючому персоналу, що веде звітність та слідкує за фінансовою складовою салону на 10% протягом усього часу.
•	Збільшення точності аналітичних звітів на 20% протягом 6 місяців.
•	Скорочення часу на підготовку усіх видів звітності для керівництва на 30% за рік.


1.4 Потреби клієнтів та ринку


При створенні цієї нашої програмної системи роботи мережі салонів краси було враховано багато потреб клієнтів, таких як:
•	Зручний фінансовий моніторинг. Власники бізнесів бажають отримувати точну фінансову звітність про їх бізнес не тратячи на це додатковий час та ресурси.
•	Перевірка прозорості бізнесу. Керуючі бізнесом бажають мати можливість у будь який момент часу спостерігати за робочим процесом у салоні віддалено та не давати можливість  не добросовісним співробітникам виконувати замовлення без звіту та надавати неякісне обслуговування клієнтам.
•	Підтримка комфортним умов у салоні завдяки моніторингу температури та вологості у приміщенні, та автоматичному регулюванні цих показників через осушувач та зволожувач повітря.
•	Зручність у бронюванні послуг. Можливість бронювання послуг онлайн через веб-сайт або мобільний додаток.
•	Якість обслуговування та результати. Можливість оцінки та зворотного зв'язку про якість послуг та рівень задоволеності клієнтів.


1.5 Бізнес-ризики


Наша програмна система, як проект, має кілька ключових факторів ризику, серед яких: 
•	Конкуренція на ринку: ринок систем для управління мережами бізнесів є аналогічна ніша, висококонкурентна, з добре зарекомендованими гравцями. Нові учасники стикаються з ризиком боротьби за отримання частки ринку в присутності домінуючих конкурентів. Цей фактор має високий рівень ризику. Щоб спробувати уникнути цього негативного сценарію, варто зосередитися на пропозиції унікальних функцій.
•	Проблеми з часом: затримки в розробці або розгортанні можуть    призвести до втрати ключових ринкових можливостей або цілей запуску. Тривала розробка може призвести до збільшення витрат на розробку. Цей фактор має середній рівень ризику. Щоб спробувати уникнути цього негативного сценарію, варто встановити реалістичний графік проекту.
•	Проблеми з використанням у користувачів: користувачі, включаючи клієнтів салонів краси та персонал, можуть зіткнутися з труднощами у використанні нової програмної системи, що може призвести до низького рівня задоволеності та відтоку клієнтів. Щоб спробувати уникнути цього, слід зайнятися проведенням навчання персоналу з використання системи та розробкою інтуїтивно зрозумілого інтерфейсу користувача.

 
 
2 КОНЦЕПЦІЯ РІШЕННЯ
2.1 Окреслення концепції


Призначення системи роботи мережі салонів краси полягає у тому, щоб спростити власниками бізнесу керування мережами салонів краси, надаючи дистанційну можливість власникам слідкувати за фінансовою звітністю бізнесу через систему та спостерігати за робочим процесом через камери відеоспостереження у салоні, таким чином у будь-який момент власник може перевірити якість обслуговування персоналу. Для клієнтів салону система надає можливість зручно бронювати час для відвідування салону краси та оцінювати якість обслуговування відповідного персоналу. Крім того, завдяки системі салон зможе підтримувати комфортні температурні умови та вологість у приміщенні салону.


2.2 Головна функціональність


2.2.1 MF-1 (for owners)


Власники мереж салонів краси матимуть такі функції:
•	Перегляд списку власних салонів краси.
•	Перегляд виконаних та існуючих замовлень у салоні.
•	Перегляд списку персоналу та їх профілів.
•	Перегляд прибутку, обороту та головної інформації салону.
•	Редагування профілів персоналу.
•	Редагування інформації про відповідного салону.
•	Перегляд загальної фінансової статистики мережі салонів за поточний місяць та минулі. 
•	Перегляд онлайн трансляції з камер відеоспостереження у салоні.


2.2.2. MF-2 (for staff)


Персоналу відповідного салону краси буде мати наступні можливості у системі:
•	Перегляд списку власних заказів
•	Створення замовлення для клієнтів не по броні
•	Зміна статусу замовлення.
•	Редагування головної інформації у власному профілю


2.2.3. MF-3 (for clients)


Клієнти, що бажають відвідати відповідний салон краси матимуть наступний функціонал:
•	Редагування профілю
•	Бронювання часу у відповідного спеціаліста салону краси
•	Перегляд списку салонів краси по місту
•	Перегляд інформації про салон та його спеціалістів, вільний час для відвідування




2.2.4. MF-4 (for administrators)


Система матиме наступні функції для адміністраторів:
•	Редагування списку поточних користувачів у системі
•	Резервне копіювання даних системи
•	Експорт даних користувачів
•	Перегляд інформації про мережі салонів та їх власників


2.3 Припущення та залежності

 	
Для повноцінної роботи програмної системи роботи мережі салонів краси передбачається, що користувач матиме доступ до Інтернету, матиме мобільний телефон або комп’ютер, пристрої мають достатню потужність для використання сайту, необхідний обсяг пам’яті, щоб встановити програму, а також володіння відповідними навичкам, щоб користувач міг усім цим користуватися. Всі елементи системи повинні мати стабільний інтернет і електропостачання. Крім того, фізичні сервера, які використовуються для роботи системи, повинні працювати стабільно. 
 
3 РАМКИ ТА ОБМЕЖЕННЯ
3.1 Рамки первинного випуску


Весь функціонал веб-сайту, який планується реалізувати в початковій версії:
•	Реєстрація та авторизація з перевіркою основних полів, таких як номер телефону та пароль на складність, повинні бути реалізовані.
•	Відображення списку салонів з можливістю переходу до конкретного салону.
•	Редагування контактної інформації та ім’я у профілі.
•	Перегляд інформації (графік, працівники, місячний прибуток, адреса) про салон з можливістю редагування графіку, адреси та списку працівників.
•	Редагування та перегляд полів зарплати, рангу, графіку та надбавки у працівника обраного працівника салону.
•	Додавання нових салонів до загального списку салонів та видалення існуючих салонів мережі. 
•	Відображення фінансової статистики (прибуток, витрати, чистий дохід) мережі салонів за відповідний проміжок часу.
Функціонал адміністраторської частини веб-сайту:
•	Видалення та затвердження зареєстрованих власників мереж.
•	Перегляд профілю власника мережі.
•	Резервне копіювання даних системи.
•	Експорт даних салонів краси.
Весь функціонал мобільного додатку, який планується реалізувати в
початковій версії:
•	Створення аккаунту з прив’язкою до існуючого салону завдяки унікальному ідентифікатору та авторизація в аккаунт.
•	Відображення списку замовлень з можливістю переходу до конкретного замовлення.
•	Створення нових та видалення існуючих замовлень під відвідувачів салону.
•	Зміна статусу замовлення.
•	Редагування контактної інформації у профілі.
Функціонал клієнтської частини веб-сайту, який планується реалізувати в початковому випуску:
•	Інтерфейс для реєстрації та авторизації акаунту власника мережі салонів краси.
•	Інтерфейс для перегляду списку салонів краси з основною інформацією
•	Інтерфейс для додавання, видалення та редагування салонів краси
•	Інтерфейс для профіля власника мережі та його редагування
•	Інтерфейс для перегляду та редагування списку працівників та їх полів
Функціонал частини інтернету речей додатку, який планується реалізувати в початковому випуску:
•	Перегляд онлайн відео-трансляції з камер відеоспостереження обраного салону красу.
•	Перегляд інформації про температуру та вологість повітря у приміщенні салону.
•	Автоматичне зміна вологості та температури повітря відповідно до поточних показників.
•	Управління можливістю автоматичного регулювання освітлення у приміщенні салону




3.2 Рамки наступних випусків


У наступних випусках планується такі функції:
•	Бронювання клієнтом часу для відвідування спеціаліста у обраному салоні краси.
•	Оцінювання клієнтом якості обслуговування після сеансу.
•	Отримання сповіщення на телефон власника про спрацювання сигналізації у відповідному салоні краси
І веб-сайт матиме такі функції:
•	Онлайн спілкування через чат з працівниками технічної підтримки веб-сайту.
•	Відображення графіку прибутку, витрат мережі салонів за обраний проміжок часу


3.3 Обмеження та винятки


Залежність від доступу до електроенергії. Система з пристроїв для підтримки комфортних умов у приміщенні салону потребує постійного джерела електроенергії для безперебійного функціонування. У випадку відсутності електроенергії, деякі усі функції IoT системи будуть недоступні.
Підключення до мережі Інтернет: Для забезпечення дистанційного керування та зв'язку з системою через мобільний додаток або веб-інтерфейс необхідне підключення до мережі Інтернет. Відсутність доступу до Інтернету буде призвести до неможливості отримання доступу до управління салонами та моніторингу за поточними показниками мережі та салонів.
Продуктивність системи та досвід користувача можуть відрізнятися залежно від пристрою та операційної системи користувача. 
4 БІЗНЕС-КОНТЕКСТ
4.1 Профілі зацікавлених сторін


Розглянемо профілі зацікавлених сторін відображені на таблиці 4.1:

Таблиця 4.1 - Профілі зацікавлених сторін
Зацікавлена
сторона	Головна
цінність	Ставлення	Головний
інтерес	Обмеження
Власники мережі	Зручність
в управлінні мережі салонів краси та в перегляді 
фінансової звітності усієї мережі. 	Простота
використання,
швидкість і
безпека. Також
зручний та зрозумілий
інтерфейс.
	Зручне
дистанційне
управління та стеження
за салонами краси у
реальному
часі.	Безпека та 
конфіденційність даних.
Персонал салону	Оптимізація
робочого
процесу та відсутність формування звітності.	Безпроблемне та зручне
управління
замовленнями.	Полегшення робочого процесу та зменшення обов’язків	Повинен
працювати
на телефонах
низького
рівня
ості

4.2 Пріоритети проєкту


Розглянемо пріоритети проєкту. Їх візуально зображено на таблиці 4.2.1

Таблиця 4.2.1 - Пріоритети проєкту
Показник	Виконання	Обмеження	Ступінь свободи
План
робіт	Випуск 1.0 має
бути доступним до
1 червня 2024 року	Має відповідати
мінімальним
вимогам	Можна налаштувати
обсяг і функції
відповідно до
розкладу
Функціональність
	75-80% високопріоритетних функцій має бути
включено до випуску 1.0	Має відповідати
мінімальним
вимогам якості	Можна скоригувати
розклад і бюджет для
розміщення
додаткових функцій
Якість	80-85%
прийнятних тестів
для користувача
повинні пройти
для випуску 1.0.	Має відповідати
мінімальним
вимогам	Може налаштувати
функції та обсяг
відповідно до вимог
якості
Персонал	Максимальний
розмір команди —
5 розробники та 1
тестувальник	Повинен мати
відповідні навички
та досвід	Можна скоригувати
графік і бюджет для
розміщення додаткового персоналу
Ціна	Допускається
перевиконання
бюджету до 18%	Має відповідати
мінімальним
вимогам якості 	Може скоригувати
графік і персонал до
бюджетних обмежень

4.3 Робоче середовище


Серверна частина системи буде розроблятися за допомогою Java та Spring, клієнтська частина буде робитися на React з використання бази даних PostgreSQL. Мобільна частина буде створювати за допомогою Kotlin. Сама система планується розгортатися за допомогою Microsoft Azure, її тестування буде проводитися завдяки Junit та Mockito.
Для розробки IoT частини системи планується використання Arduino з Wokwi емулятором. Arduino IDE буде використовуватися у якості середовища для розробки. Система з приладів буде обраховувати освітленість у приміщені салону краси, температуру у ньому та вологість.
 
5 СЕРВЕРНА ЧАСТИНА
5.1 Загальна логіка та сутності


Для реалізації визначеного функціоналу треба перш за все чітко визначити та описати всі необхідні сутності системи. В цьому допоможе розробка ER-моделі даних, яка візуалізує всі сутності ті зв’язки між ними. Після того, як були визначені усі сутності була створена ER-модель даних (див. рис. 2.2). Модель даних включає в себе наступні сутності та поля:
а) користувач:
1) користувач_id;
2) ) електронна_пошта;
3) ім'я користувача;
4) прізвище користувача
5) по батькові користувача 
6 )номер телефона
7) заробітна плата 
8) надбавка
9) робочій графік
10) пароль
11) роль
12) статус підтвердження
	б) замовлення:
		1) замовлення_id
		2) назва замовлення
		3) дата та час замовлення
		4) власник_id 
		5) салон_id
		6) працівник_id
	в) cалон:
	1) салон_id
	2) назва
	3) область
	4) місто
	5) адреса
	6) розклад 
	7) код запрошення
	8) власник_id

Представленні сутності мають усе необхідне для реалізації запланованого функціоналу.
Тепер, коли всі сутності та поля, що їх належать визначенні, розглянемо сценарії використання системи. Увесь функціонал зазначений у документі Vision & Scope був розподілений між чотирьох акторами, а саме: гість, працівник, адміністратор та власник мережі. Коли людина вперше користується системою, то вона є гостем. Гість може лише створити аккаунт та авторизуватися у систему. Також слід зазначити, що гість не має ніяких прав щодо перегляду чи редагуванню будь-якої інформації. Увійшовши до системи з мобайл додатку, гість стає працівником та отримує доступ до клієнтського функціоналу, після введення унікального коду запрошення, а увійшовши до системи з веб сайту на комп’ютері він отримує доступ до функціоналу власника. Власник має можливість переглядати свої салони, їх фінансову статистику, працівників цих салонів, додавати нові салони, редагувати та видаляти існуючи. Також він може редагувати свої дані у налаштуваннях та дані працівників його салонів. Працівник має можливість переглядати свої замовлення, додавати нові замовлення та змінювати статус виконання замовлення. Для кожного салону зі списку можно переглянути детальну інформацію. Крім того, власник закладу може переглядати фінансові метрики усієї мережі салонів. Замовлення можно помітити, як виконане та переглянути його зміст. Адміністратор має можливість переглядати інформацію про всіх користувачів системи та змінювати статус підтвердження для того, щоби регулювати доступний функціонал власника.

На основі таких сценаріїв використання системи була створена UML діаграма прецедентів (див. рис. 5.1).

























Переглянемо цей діаграму прецедентів:

 
Рисунок 5.1 - UML діаграма прецедентів.

Також, після визначення сутностей та зв’язків між ними було створено наступну діаграму.









Переглянемо цю модель даних:

 
Рисунок 2.2 - ER модель даних

Таким чином, в результаті концептуального моделювання предметної області, були визначені основні сутності програмної системи та створені дві діаграми. Далі ми розглянемо прийняті інженерні рішення.
 
5.2 Інженерні рішення


Технології, використані для розробки серверної частини, були обрані з урахуванням функціональних вимог проекту. Для написання серверної частини був обраний фреймворк Spring Boot на мові програмування Java. Spring Boot надає зручний і швидкий спосіб створення веб-додатків. Для взаємодії з базою даних використовується СУБД PostgresSQL, яка забезпечує надійне зберігання даних та підтримує транзакції. Основний функціонал системи реалізований з використанням Spring Boot, що дозволяє легко і швидко розробляти та підтримувати серверну частину. Окрім цього, спілкування між сервером та клієнтською частиною, а також із мобільним додатком, реалізоване за допомогою HTTP запитів, що забезпечує загальну структуру взаємодії системи.

Більш детальна інформація про взаємодію серверної частини з іншими елементами системи представлена на UML-діаграмі розгортання (див. рис. 5.3)

 
Рисунок 5.3 – UML діаграма розгортання
Для ілюстрації взаємодії усіх компонентів між собою, ми створили UML-діаграму діяльності (див. рис. 3.2). За допомогою Smart Device власник мережі може спостерігати в реальному часі за тим, що відбувається у салоні через камери відеоспостереження підключенні до додатку. Крім того працівники можуть налаштовувати рівень освітлення та регулювати вологість повітря у приміщенні через мобайл додаток.  
Система має стандартну структуру проекту Spring Boot з 5 мікросервісів, які складаються з наступних компонентів:
а) Каталог auth-service:
1) Каталог сonfig, для файлів конфігурацій;
2) Каталог controllers, який зберігає контролери;
3) Каталог entity, який зберігає сутності;
4) Каталог repository, для репозиторіїв;
5) Каталог service, для зберігання сервісів;
6) Каталог dto, для зберігання об’єктів;
7) Файл AuthServiceApplication.java для запуску сервісу
б) Каталог gateway:
1) Каталог сonfig, для файлів конфігурацій;
2) Каталог filter, який зберігає фільтри системи;
3) Каталог util, який зберігає додаткові класи;
4) Файл GatewayApplication.java для запуску сервісу
5) Файл keystore.p12, для зберігання усіх ключів для HTTPS
в) Каталог orderMS:
1) Каталог impl, для зберігання реалізації сервісів;
2) Файл Order.java, модель замовлення.
3) Файл OrderController.java, для зберігання методів;
4) Файл OrderRepository.java, для використання репозиторію;
5) Файл OrderService.java, для зберігання сервісних методів;
6) Файл SaloonModel.java, для відправки запитів на інші сервіси;
7) Файл UserModel.java, для відправки запитів на інші сервісі;
8) Файл OrderServiceApplication.java для запуску сервісу
г) Каталог saloonMS:
1) Каталог impl, для зберігання реалізації сервісів;
2) Файл Saloon.java, модель салону.
3) Файл SaloonController.java, для зберігання методів;
4) Файл SaloonRepository.java, для використання репозиторію;
5) Файл SaloonService.java, для зберігання сервісних методів;
6) Файл SaloonServiceApplication.java для запуску сервісу
д) Каталог userMS:
1) Каталог impl, для зберігання реалізації сервісів;
2) Файл UserCredential.java, модель користувача.
3) Файл UserController.java, для зберігання методів;
4) Файл UserRepository.java, для використання репозиторію;
5) Файл UserService.java, для зберігання сервісних методів;
6) Файл UserServiceApplication.java для запуску сервісу

Також, для цього була створена UML діаграма пакетів (див. рис. 5.4). 

 
Рисунок 5.4 – UML діаграма пакетів.
Нижче в таблиці 5.2.1 (див. розділ А.1 у додатку А) наведемо специфікацію HTTP запитів усіх методів.
Серед методів обробки даних можна виділити методи вирахування фінансової статистики усієї мережі салонів, які приймають ідентифікатор та строку, яка визначає проміжок часу за який вираховується статистика. До цих методів входить метод, який вираховує суму заробітних плат працівників салонів власника (див. розділ Б.1 у додатку Б) та метод, який вираховує та повертає прибуток мережі салонів за проміжок часу (див. розділ Б.2 у додатку Б). У разі винятка, методи ловлять його та виводять помилку.
 
6 IOT ЧАСТИНА
6.1 Роль IoT у системі


IoT частина розробленого проекту взаємодіє з актором працівника, коли той заходить на сторінку замовлень у додатку на телефоні. Пристрій вимірює температуру, вологість та заміряє ступінь освітлення приміщення салону краси, після чого відправляє дані на сервер, які відображаються на тій сторінці, якщо працівник авторизувався. Взаємодію зображено на діаграмі прецедентів (див. рис. 6.1).

 
Рисунок 6.1 - UML діаграма прецедентів.

Завдяки цієї діаграми ми окреслили функціональні вимоги до IoT частини проекту. 
6.2 Інженерні рішення


Для реалізації IoT функціональності системи використовувалася мова програмування Arduino (.ino). Програма взаємодіє з сервером через бібліотеку WiFi і використовує клієнт ThingSpeak для обміну даними. Зчитування інформації з сенсорів здійснюється за допомогою бібліотеки DHT sensor library, яка дозволяє отримувати дані з датчика температури та вологості. Після підключення до Wi-Fi мережі програма готова надсилати дані на сервер. Надсилання даних здійснюється через сервіс ThingSpeak та його бібліотеку. Передаються дані про температуру, вологість і рівень освітленості приміщення. Такий підхід дозволяє структуровано представляти дані і забезпечує зручний обмін інформацією між IoT пристроєм і сервером. Код оптимізовано для роботи на пристроях з обмеженими ресурсами, що полегшує його портування на реальні IoT пристрої. Використання сервісу ThingSpeak разом з мовою Arduino дозволяє досягти ефективної взаємодії та оптимального використання ресурсів пристрою для передачі даних на сервер.
Як було зазначено вище, для написання IoT частини системи була обрана мова програмування Arduino. Компіляція коду відбувається за допомогою Wokwi емулятора. Обмін даними с сервером відбувається за допомогою бібліотеки WiFi та сервісу ThingSpeak, який приймає ці данні та при HTTP запиті з серверу до нього відправляє дані на сервер, якщо ключ API cпівпадає. Для повного розуміння використаних технологій була створена діаграма пакетів (див. рис. 6.2)




Для повного розуміння використаних технологій була створена діаграма пакетів (див. рис. 6.2) 

 
Рисунок 6.2 - UML діаграма пакетів для IoT частини системи

Для демонстрації взаємодії пристрою з користувачем було розроблено детальну діаграму взаємодії (див. рис. 6.3). За допомогою цих діаграм було визначено основні технології та архітектуру системи. Приклад коду для функціональної реалізації IoT частини системи наведено у додатку В.







Переглянемо діаграму взаємодії:

 
Рисунок 6.3 – UML діаграма взаємодії.

Крім того, на основі цієї взаємодії створено діаграму діяльності, яка показує взаємодію пристрою з сервером (див. рис. 6.4).






Переглянемо діаграму діяльності:

 
Рисунок 6.4 – UML діаграма діяльності.

 
7 КЛІЄНТСЬКА ЧАСТИНА
7.1 Загальний огляд веб-застосунку


Системою користуються три типи акторів: власник мережі салонів, працівники салонів та адміністратор. За допомогою веб-клієнту, користувач може створити акаунт або авторизуватися у системі, переглядати список усіх салонів мережі, переглядати або редагувати детальну інформацію, видаляти та додавати нові салоні, переглядати список працівників у обраному салоні, переглядати та редагувати інформацію про кожного працівника в салоні, та видаляти працівників. Крім того власник може редагувати власну інформацію у налаштуваннях та переглядати фінансову статистику мережі салоні. Адміністратор може переглядати список усіх користувачів системи, змінювати статус акаунту користувачів, виконувати резервне копіювання БД та експортувати дані користувачів. Для демонстрації вище означених сценаріїв була створена UML діаграма прецедентів (див. рис. 7.1).














Переглянемо діаграму прецедентів:

 
Рисунок 7.1 - UML діаграма прецедентів веб-клієнту системи


7.2 Інженерні рішення


Клієнтська частина системи розроблена з використанням React. Сам проєкт має стандартну структуру для React-додатків. Для демонстрації структури клієнтської частини проєкту було створено діаграму компонентів, з яких вона складається (див. рис. 7.2), на якій продемонстровані всі компоненти цієї системи.

 
Рисунок 7.2 - UML діаграма компонентів веб-клієнту системи

Додаток починається з файлу index.js, який підключає файл App.js, де розміщена основна логіка. У цьому файлі реалізовано маршрути, описані у файлі router\index.js. Також тут проводиться перевірка аутентифікації користувача та зберігання його ролі.
Компоненти SignIn та Registration відповідають за авторизацію та реєстрацію в системі. Вони надсилають запити на сервер для авторизації та зберігання даних авторизованого користувача, таких як id, статус авторизації та Bearer токен, для подальших запитів.
Для отримання даних з  серверної частини використовується така бібліотека, як Axios. Токен авторизації додається до кожного запиту на сервер, тому що без нього сервер не оброблятиме запит.
Для демонстрації усіх можливих дій для користувача була розроблена діаграма діяльності (див. рис. 7.3).

 
Рисунок 7.3 - UML діаграма діяльності веб-клієнту системи

На ній детально відображено дії, які доступні користувачеві та етапи, через які необхідно пройти, що їх здійснити.
Для демонстрації каталогів системи була розроблена діаграма пакеті (див. рис. 7.4). На неї відображено усі основні пакети, які має система та їх залежність один від одного.
 
Рисунок 7.4 – UML діаграма пакетів.

Система має функції повідомлень про успішне виконане резервне копіювання БД та експорт даних користувачів системи і відображає їх на веб-сторінці. У разі неуспішності виконання сторінка виводить помилку. Код для цієї функції наведений у Додатку Г. 
 
8 МОБІЛЬНА ЧАСТИНА
8.1 Моделювання застосунку 


Системою користується один актор, який відповідає працівнику відповідного салону красу. За допомогою додатку користувач може зареєструвати акаунт у салоні або вже авторизуватися у системі, переглядати список усіх замовлень салону, його показники приміщення, такі як температура ,вологість та освітлення, дані показників в приміщені автоматично оновлюються раз в 10 секунд. Крім того працівник може  переглядати інформацію про існуючи замовлення, редагувати їх та скасовувати. Також він може  створювати нові замовлення, переглядати свій профіль та редагувати його інформацію.
Взаємодію системи з користувачем зобразимо нижче на діаграмі прецедентів (рис 8.1).

 
Рисунок 8.1 - UML діаграма прецедентів мобільної системи

8.2 Інженерні рішення


Мобільна частина була розроблена на мові програмування Kotlin. Архітектура системи базується на клієнт-серверній архітектурі використовуючи такий патер, як MVVC. Основний функціонал реалізується в класах Activity на мові Kotlin, де кожен Activity відповідає за функціонал окремої сторінки. Було створено Activity для головної сторінки, сторінки авторизації, реєстрації, замовлень, додавання замовлень та профіля. Розмітки для візуальної складової сторінок розміщені у папці layout у вигляді .xml файлу.
Використовувався дизайнер інтерфейсів, який розробляє користувацький інтерфейс, використовуючи технологію XML розмітки.
Програма взаємодіє з іншими компонентами системи завдяки HTTP запитам з використанням JWT, який перевіряється під час авторизації та створюється після реєстрації.
Функціональні зв'язки між користувацьким інтерфейсом та ViewModel реалізуються через прив’язки (bindings) які зв’язують розмітку і Activity. Для демонстрації структури мобільної частини проєкту було створено діаграму компонентів, з яких вона складається (див. рис. 8.2), на якій продемонстровані всі компоненти цієї системи.










Переглянемо діаграму компонентів мобільної частини системи:

 
Рисунок 8.2 - UML діаграма компонентів мобільної системи

Додаток починається з файлу MainActivity.kt, через який можна перейти до іншої активності. Для відображення списку замовлень було створено OrdersAdapter, який допомагає взаємодіяти з RecycleView розмітки. 
Активності SignUpActivity та LoginActivity відповідають за авторизацію та реєстрацію в системі. Вони надсилають запити на сервер для авторизації та зберігання даних авторизованого користувача.
Для отримання даних з  серверної частини використовується такий інструмент, як OkHttp.







Для демонстрації усіх можливих дій для користувача була розроблена діаграма діяльності (див. рис. 8.2).

 
Рисунок 8.3 - UML діаграма діяльності веб-клієнту системи

На цій діаграмі детально відображено дії, які доступні користувачеві та етапи, через які необхідно пройти, щоб їх здійснити.


Для демонстрації каталогів системи була розроблена діаграма пакеті (див. рис. 8.4). На неї відображено усі основні пакети, які має система та їх залежність один від одного.

 
Рисунок 3.3 – UML діаграма пакетів.

Отже, таким чином, ми продемонстрували каталоги мобільної частини нашої системи.
 
ВИСНОВКИ


Під час виконання цієї курсової роботи ми спроектували та розробили "Програмну систему для роботи мережі салонів краси". В якості СУБД була використана PostgreSQL. Система дозволяє зберігати, редагувати, видаляти та переглядати інформацію про фінансову статистику, працівників, замовлення та інші сутності предметної області, забезпечуючи цілісність та безпеку даних.
Була розроблена серверна частина "Програмна система для роботи мережі салонів краси", яка може використовуватися власниками середніх та малих бізнесів для підвищення ефективності та продуктивності салонів, візуалізації даних про їх роботу, збору статистики тощо. Інформаційна система також надає можливість переглядати статистику за допомогою SQL запитів або ORM технології, наприклад, Hibernate.
Була розроблена частина системи, що дозволяє отримувати дані з датчиків температури, вологості та освітлення у салонах й надсилати їх на сервер для подальшого аналізу та управління умовами у приміщеннях.
Також була розроблена веб частина, яка є основним інтерфейсом програми для власників салонів, що підтримує, управління працівниками, салонами, адміністрування, та містить бізнес-логіку для управління салонами. Вона дозволяє змінювати усе що стосується салонів та працівників в них, та спостерігати їх фінансову статистику у режимі реального часу.
Була проаналізована предметна область салонів краси, на основі чого визначено вимоги до програмного продукту.
У ході курсового проектування були отримані навички створення інформаційної системи, що включає в себе створення бази даних у СУБД PostgreSQL, роботу з платформою Spring Boot, мовою програмування Java та Kotlin, Android Studio та React. Для розробки серверної частини було обрано IDE IntelliJ IDEA. Для розробки клієнтської частини використовувалася Visual Studio Code. Також було проведено багато роботи під час аналізу предметної області, аналізу існуючих аналогів, концептуального, логічного та ER-моделювання предметної області.
Під час розробки було використано об’єктно-орієнтований підхід для створення ПЗ, для доступу до бази даних була використана технологія JPA (Java Persistence API), патерни проектування MVC, підхід мікросервісної архітектури.

 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	Шилдт Г. Програмування на Java [Текст] / Герберт Шилдт. -Харків: Фоліо, 2015. -1024 с.
2.	Kotlin документація. URL: https://kotlinlang.org/docs/home.html (дата звернення 16.06.2024).
3.	Фаулер М. Рефакторинг: покращення існуючого коду [Текст] / Мартін Фаулер. Київ: Діалектика, 2019. -448 с.
4.	8. Програмний код розробленої системи. URL: https://github.com/NureKoshelDavid/apzkr-pzpi-21-7-koshel-david (дата звернення: 16.06.2024).
5.	Json Web Token введення. URL: https://jwt.io/introduction (дата звернення 16.06.2024).
6.	Демо запис функціонального тестування системи. URL: https://youtu.be/zSprHVonGGo (дата звернення: 16.06.2024).


 
ДОДАТОК А
Таблиці

Таблиця 5.2.1 - Специфікація REST API серверної частини системи
Контролер 	Метод	Посилання	Дія
Auth	POST	/auth/register	Реєстрація нового користувача
	POST	/auth/token	Авторизація користувача
	GET	/auth/validate	Перевірка JWT при авторизації
User	GET	/user/all	Повертає список усіх користувачів
	GET	/user/staff	Повертає cписок працівників салону
	POST	/user/staff	Додає працівника
	GET	/users/{id}	Повертає інформацію про користувача
	DELETE	/users/{id}	Видаляє користувача
	PUT	/users/{id}	Оновлює інформацію про користувача
	GET	/users/email/{email}	Повертає користувача за електронною поштою
	GET	/users/export-users	Експортує данні користувачів в файл

Продовження таблиці 5.2.1
Контролер 	Метод	Посилання	Дія
User	GET	/users/backup	Створює резервну копію БД
Order	GET	/orders/all	Повертає усі замовлення салону
	GET	/orders/all/{ownerId}	Повертає усі замовлення мережі салонів
	POST	/orders/	Створює замовлення 
	GET	/orders/{id}	Повертає замовлення 
	DELETE	/orders/{id}	Видаляє замовлення
	PUT	/orders/{id}	Оновлює інформацію замовлення
	GET	/orders/statistics/salary-costs/{ownerId}	Вираховую суму заробітних плат працівників мережі 
	GET	/orders/statistics/profit/
{ownerId}	Повертає прибуток мережі салонів за проміжок часу
	GET	/orders/statistics/net-profit/{ownerId}	Повертає чистий прибуток мережі салонів за місяць
	GET	/orders/statistics/orders-amount/{ownerId}	Повертає кількість замовлень за проміжок часу

Продовження таблиці 5.2.1
Контролер 	Метод	Посилання	Дія
Saloon	GET	/saloons/all/{id}	Повертає список усіх салонів конкретного власника
	GET	/saloons/all	Повертає список усіх салонів
	POST	/saloons	Створює салон 
	GET	/saloons/{id}	Повертає конкретний салон
	DELETE	/saloons/{id}	Видаляє салон
	PUT	/saloons/{id}	Оновлює інформацію про салон


 
ДОДАТОК Б
Код серверної частини

Б.1 Код методу вирахування суми заробітних плат усіх працівників 

1   // Вирахування суми заробітних плат працівників
2   public int getSalaryCosts(@PathVariable Long ownerId){
3       int salaryCosts=0;
4       RestTemplate restTemplate = new RestTemplate();
5       try{
6           List<SaloonModel> saloons = restTemplate.exchange("http://localhost:8081/saloons/all/" + ownerId, HttpMethod.GET, null, new ParameterizedTypeReference<List<SaloonModel>>() {}).getBody();
7   
8           for (SaloonModel saloon : saloons) {
9               List<UserModel> users = restTemplate.exchange("http://localhost:8082/users/staff?saloonId=" + saloon.getId(), HttpMethod.GET, null, new ParameterizedTypeReference<List<UserModel>>() {}).getBody();
10  
11              for (UserModel user: users) {
12                  salaryCosts+=user.getSalary();
13              }
14          }
15      }
16      catch (Exception e){
17          System.out.println("Сталася помилка");
18      }
19  
20      return salaryCosts;
21  }

Б.2 Код методу вирахування прибутку мережі салонів

1   //Загальний прибуток мережі салонів за проміжок часу
2   @Override
3   public int getProfit(Long ownerId,String time) {
4       List<Order> orders;
5       try {
6           orders = findAllByOwnerId(ownerId);
7       }
8       catch (Exception E){
9           System.out.println("Сталася помилка");
10          return 0;
11      }
12      int profit = 0;
13      for (Order order: orders) {
14          LocalDateTime orderDateTime = order.getDatetime().toLocalDateTime();
15          switch (time) {
16              case "1-month":
17                  if (orderDateTime.isAfter(LocalDateTime.now().minusMonths(1))) {
18                      profit += order.getTotalCost();
19                  }
20                  break;
21              case "3-months":
22                  if (orderDateTime.isAfter(LocalDateTime.now().minusMonths(3))) {
23                      profit += order.getTotalCost();
24                  }
25                  break;
26              case "6-months":
27                  if (orderDateTime.isAfter(LocalDateTime.now().minusMonths(6))) {
28                      profit += order.getTotalCost();
29                  }
30                  break;
31              case "12-months":
32                  if (orderDateTime.isAfter(LocalDateTime.now().minusMonths(12))) {
33                      profit += order.getTotalCost();
34                  }
35                  break;
36              case "all-time":
37                  profit += order.getTotalCost();
38                  break;
39              default:
40                  profit += order.getTotalCost();
41                  break;
42          }
43      }
44      return profit;
45  }
 
ДОДАТОК В
Програмний код IoT пристрою

1  #include "DHT.h"
2  #include <WiFi.h>
3  #include "ThingSpeak.h"
4  #define DHTPIN 0
5  #define LDRPIN 32
6  #define DHTTYPE DHT22
7  
8  const int channelNumber = 2559929 ;
9  const char* writeKey = "GFHNICEOUA6OY0ZI";
10 
11 WiFiClient client;
12 DHT dht(DHTPIN, DHTTYPE);
13 
14 void setup() {
15   Serial.begin(9600);
16   pinMode(LDRPIN, INPUT);
17   dht.begin();
18   WiFi.begin("Wokwi-GUEST", "");
19 
20   while (WiFi.status() != WL_CONNECTED) {
21     delay(1000);
22     Serial.println("Connecting to WiFi...");
23   }
24   Serial.println("Connected to WiFi");
25   WiFi.mode(WIFI_STA);
26   ThingSpeak.begin(client);
27 }
28 
29 void loop() {
30   // Отримання та запис даних до ThingSpeak
31   int l = analogRead(LDRPIN);
32   float h = dht.readHumidity();
33   float t = dht.readTemperature();
34   ThingSpeak.setField(1, t);
35   ThingSpeak.setField(2, h);
36   ThingSpeak.setField(3, l);
37 
38   if (isnan(h) || isnan(t)) {
39     Serial.println(F("Failed to read from DHT sensor!"));
40     return;
41   }
42 
43   Serial.print(F("Humidity: "));
44   Serial.print(h);
45   Serial.print(F("%  Temperature: "));
46   Serial.print(t);
47   Serial.println(F("°C "));
48   Serial.println(l);
49 
50   int x = ThingSpeak.writeFields(channelNumber, writeKey);
51   if (x == 200) {
52     Serial.println("Data pushed successfull");
53   } else {
54     Serial.println("Push error" + String(x));
55   }
56 
57   delay(10000);
58 }
 
ДОДАТОК Г
Код фунцій повідомлення для резервного копіювання та бекапу

1  async function exportUsers(){
2      try {
3          const response = await axios.get('https://localhost:8080/users/export-users', {headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } });
4          setExportMessage("Експорт даних користувачів успішно виконан")
5      } catch (error) {
6          setExportMessage("Помилка при виконанні експорту")
7      }
8  } 
9  async function backup(){
10     try {
11         const response = await axios.get('https://localhost:8080/users/backup', {headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }});
12         setBackupMessage('Резервне копіювання успішно виконано');
13     } catch (error) {
14         setBackupMessage('Помилка при виконанні резервного копіювання БД');
15     }
16 }

